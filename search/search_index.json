{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform","title":"Home"},{"location":"#terraform","text":"","title":"Terraform"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct template here","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct-template-here","text":"","title":"Code of Conduct template here"},{"location":"CONTRIBUTING/","text":"Contributing Guidelines Ensure that you adhere to the following guidelines: Should be about principles and concepts that can be applied in any company or individual project. Do not focus on particular tools or tech stack(which usually change over time). Adhere to the Code of Conduct Should be relevant to the roles and responsibilities of Linux. Should be locally tested (see steps for testing) and well formatted. Building and testing locally Run the following commands to build and view the site locally before opening a PR. python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs build mkdocs serve","title":"Contribute"},{"location":"CONTRIBUTING/#contributing-guidelines","text":"Ensure that you adhere to the following guidelines: Should be about principles and concepts that can be applied in any company or individual project. Do not focus on particular tools or tech stack(which usually change over time). Adhere to the Code of Conduct Should be relevant to the roles and responsibilities of Linux. Should be locally tested (see steps for testing) and well formatted.","title":"Contributing Guidelines"},{"location":"CONTRIBUTING/#building-and-testing-locally","text":"Run the following commands to build and view the site locally before opening a PR. python3 -m venv .venv source .venv/bin/activate pip install -r requirements.txt mkdocs build mkdocs serve","title":"Building and testing locally"},{"location":"provisioning-infrastructure/provider-config/","text":"What is a terraform provider? In Terraform, providers are plugins that interact with APIs of various cloud platforms, services, or third-party systems. They enable Terraform to manage resources and infrastructure across different platforms in a consistent manner. This allows terraform to operate in a cloud agnostic manner. How to configure your provider? As a prerequisite ensure that you have installed terraform and set up an account for whatever cloud platform you are using with the relevant credentials. Refer to the docs of the provide and follow the ''' use provider ''' instructions. Lets use AWS for example. The documentation for using the AWS provider can simply be found at https://registry.terraform.io/providers/hashicorp/aws/latest/docs. The configuration provided ''' terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"5.29.0\" } } } provider \"aws\" {} ''' can simply be copied into a provider.tf file. Finally running ''' terraform init ''' in order to download and install all the plugins for the provider from the terraform registry.","title":"Provider Configuration"},{"location":"provisioning-infrastructure/provider-config/#what-is-a-terraform-provider","text":"In Terraform, providers are plugins that interact with APIs of various cloud platforms, services, or third-party systems. They enable Terraform to manage resources and infrastructure across different platforms in a consistent manner. This allows terraform to operate in a cloud agnostic manner.","title":"What is a terraform provider?"},{"location":"provisioning-infrastructure/provider-config/#how-to-configure-your-provider","text":"As a prerequisite ensure that you have installed terraform and set up an account for whatever cloud platform you are using with the relevant credentials. Refer to the docs of the provide and follow the ''' use provider ''' instructions. Lets use AWS for example. The documentation for using the AWS provider can simply be found at https://registry.terraform.io/providers/hashicorp/aws/latest/docs. The configuration provided ''' terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"5.29.0\" } } } provider \"aws\" {} ''' can simply be copied into a provider.tf file. Finally running ''' terraform init ''' in order to download and install all the plugins for the provider from the terraform registry.","title":"How to configure your provider?"},{"location":"provisioning-infrastructure/terraform-apply/","text":"Once the plan looks good its time to apply! The terraform apply command is very straight forward and executes the actions proposed in a Terraform plan. Thats it literally... it outputs a plan as if you have run terraform plan and awaits your approval. Little tip... if the repetitive plan seems annoying and inconvenient it then you can simply bypass it using the --auto-approve flag. But theres nothing wrong with double checking XD","title":"Terraform Apply"},{"location":"provisioning-infrastructure/terraform-apply/#once-the-plan-looks-good-its-time-to-apply","text":"The terraform apply command is very straight forward and executes the actions proposed in a Terraform plan. Thats it literally... it outputs a plan as if you have run terraform plan and awaits your approval. Little tip... if the repetitive plan seems annoying and inconvenient it then you can simply bypass it using the --auto-approve flag. But theres nothing wrong with double checking XD","title":"Once the plan looks good its time to apply!"},{"location":"provisioning-infrastructure/terraform-destroy/","text":"Sometimes the best plan is to destroy things :( ! Terraform destroy command is a convenient way to destroy all remote objects managed by a particular Terraform configuration. One way to really understand the terraform destroy is by simply viewing it as an alias for terraform apply -destroy .","title":"Terraform Destroy"},{"location":"provisioning-infrastructure/terraform-destroy/#sometimes-the-best-plan-is-to-destroy-things","text":"Terraform destroy command is a convenient way to destroy all remote objects managed by a particular Terraform configuration. One way to really understand the terraform destroy is by simply viewing it as an alias for terraform apply -destroy .","title":"Sometimes the best plan is to destroy things :( !"},{"location":"provisioning-infrastructure/terraform-plan/","text":"Terraform always comes up with a plan! Following our understanding of state files it is important to know what our outputed plan represents. It reads the current state of any already-existing remote objects to make sure that the Terraform state is up-to-date. If not the plan will suggest to either create, change or destroy resources to reach the desired state. This command is simply executed by running terraform plan When operating with large scale infrastructure it can be very inconvenient filtering through very large plans. If you would like to have a granular approach you can simply use the - target flag for the relevant resource. The plan command alone does not actually carry out the proposed changes","title":"Terraform Plan"},{"location":"provisioning-infrastructure/terraform-plan/#terraform-always-comes-up-with-a-plan","text":"Following our understanding of state files it is important to know what our outputed plan represents. It reads the current state of any already-existing remote objects to make sure that the Terraform state is up-to-date. If not the plan will suggest to either create, change or destroy resources to reach the desired state. This command is simply executed by running terraform plan When operating with large scale infrastructure it can be very inconvenient filtering through very large plans. If you would like to have a granular approach you can simply use the - target flag for the relevant resource. The plan command alone does not actually carry out the proposed changes","title":"Terraform always comes up with a plan!"},{"location":"terraform-intro/terraform-state/","text":"Terraform state file - The terraform state file can be described as the backbone of your terraform configuration. It is your record of reality and serves as a reflection of your existing infrastructure. It is very important to understand the relationship between your terraform configuration (desired state) and your existing infrastructure (current state). Desired vs current state: Terraforms primary function is to create, modify or destroy infrastructure resources to match the desired stated described in your terraform config. Current state is the actual state of resource that has been deployed. E.g deploying an EC2 t2.micro instance 'resource \"aws_instance\" \"myec2\" { ami = \"ami-05d72852800cbf29e\" instance_type = \"t2.micro\" }' and then modifying it in the AWS console to t2.medium. The desired state will remain as a t2.micro and current state as t2.medium. Hence running a terraform plan will indicate a change destroying the t2.medium instance and reverting it back to the desired t2.micro instance. Terraform tries to ensure that infrastructure code is based on desired state. If there is difference between the two, terraform plan presents the changes neccessary to achieve desired state. In order to check if the current state is the same as the desired state run a 'terraform plan' and you should receive a prompt back saying \u201cNo changes. Infrastructure up to date\u201d. Running ''' terraform refresh ''' will retrieve the current state of resources and add any changes to the tfstate file.","title":"Terraform state file"},{"location":"terraform-intro/terraform-state/#terraform-state-file-","text":"The terraform state file can be described as the backbone of your terraform configuration. It is your record of reality and serves as a reflection of your existing infrastructure. It is very important to understand the relationship between your terraform configuration (desired state) and your existing infrastructure (current state).","title":"Terraform state file -"},{"location":"terraform-intro/terraform-state/#desired-vs-current-state","text":"Terraforms primary function is to create, modify or destroy infrastructure resources to match the desired stated described in your terraform config. Current state is the actual state of resource that has been deployed. E.g deploying an EC2 t2.micro instance 'resource \"aws_instance\" \"myec2\" { ami = \"ami-05d72852800cbf29e\" instance_type = \"t2.micro\" }' and then modifying it in the AWS console to t2.medium. The desired state will remain as a t2.micro and current state as t2.medium. Hence running a terraform plan will indicate a change destroying the t2.medium instance and reverting it back to the desired t2.micro instance. Terraform tries to ensure that infrastructure code is based on desired state. If there is difference between the two, terraform plan presents the changes neccessary to achieve desired state. In order to check if the current state is the same as the desired state run a 'terraform plan' and you should receive a prompt back saying \u201cNo changes. Infrastructure up to date\u201d. Running ''' terraform refresh ''' will retrieve the current state of resources and add any changes to the tfstate file.","title":"Desired vs current state:"},{"location":"terraform-intro/terraforming-tips/","text":"Tips for using Terraform: Before using terraform here are some tips you should be aware of and try implementing straight away to optimise your learning. Terraform documentation: Have a tab open with the terraform docs that you always refer back to. The terraform documentation is quite extensive and will allow you to understand the requirements of different resources. https://registry.terraform.io/ Testing and Validation: Test your Terraform code rigorously, using tools like 'terraform plan' and 'terraform validate' to validate your configurations before applying changes. This prevents unintended or destructive modifications. Start small: Have an iterative approach to your terraform code. Start off with something simple that works even if it is a single terraform resource. Then look to improving your code by using variables or modules or other best practice approaches.","title":"Terraforming Tips"},{"location":"terraform-intro/terraforming-tips/#tips-for-using-terraform","text":"Before using terraform here are some tips you should be aware of and try implementing straight away to optimise your learning. Terraform documentation: Have a tab open with the terraform docs that you always refer back to. The terraform documentation is quite extensive and will allow you to understand the requirements of different resources. https://registry.terraform.io/ Testing and Validation: Test your Terraform code rigorously, using tools like 'terraform plan' and 'terraform validate' to validate your configurations before applying changes. This prevents unintended or destructive modifications. Start small: Have an iterative approach to your terraform code. Start off with something simple that works even if it is a single terraform resource. Then look to improving your code by using variables or modules or other best practice approaches.","title":"Tips for using Terraform:"},{"location":"terraform-intro/what-is-iac/","text":"What is IAC? IAC stands for Infrastructure as code. It is surprisingly quite self explanatory and is the concept of treating infrastructure provisioning, configuration, and management as code. Before diving into what Terraform does or is there is an important distinction that needs to be made between Infrastructure Orchestration and Configuration Management. Infrastructure Orchestration vs Config management: Terraform, Cloudformation are infrastructure orchestration tools which means they can provision servers and infrastructure by themselves. Ansible,chef and puppet are config management tools hence designed to configure and manage software on existing servers. They streamline tasks such as software installation, updates, and enforcing desired system states across multiple machines. Config management tools can do some infrastructure provisioning but better fit for other tasks.","title":"What is IAC"},{"location":"terraform-intro/what-is-iac/#what-is-iac","text":"IAC stands for Infrastructure as code. It is surprisingly quite self explanatory and is the concept of treating infrastructure provisioning, configuration, and management as code. Before diving into what Terraform does or is there is an important distinction that needs to be made between Infrastructure Orchestration and Configuration Management.","title":"What is IAC?"},{"location":"terraform-intro/what-is-iac/#infrastructure-orchestration-vs-config-management","text":"Terraform, Cloudformation are infrastructure orchestration tools which means they can provision servers and infrastructure by themselves. Ansible,chef and puppet are config management tools hence designed to configure and manage software on existing servers. They streamline tasks such as software installation, updates, and enforcing desired system states across multiple machines. Config management tools can do some infrastructure provisioning but better fit for other tasks.","title":"Infrastructure Orchestration vs Config management:"}]}